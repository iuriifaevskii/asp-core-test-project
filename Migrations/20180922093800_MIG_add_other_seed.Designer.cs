// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180922093800_MIG_add_other_seed")]
    partial class MIG_add_other_seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<int>("AuthorId");

                    b.Property<int>("DailyTaskId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("DailyTaskId");

                    b.ToTable("Comments");

                    b.HasData(
                        new { Id = 1, Author = "tom", AuthorId = 1, DailyTaskId = 1, Text = "comment 1" },
                        new { Id = 2, Author = "tom", AuthorId = 1, DailyTaskId = 1, Text = "comment 2" },
                        new { Id = 3, Author = "alice", AuthorId = 2, DailyTaskId = 2, Text = "comment 3" },
                        new { Id = 4, Author = "sam", AuthorId = 3, DailyTaskId = 2, Text = "comment 4" }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.DailyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new { Id = 1, Description = "Description task 1", Name = "Task 1" },
                        new { Id = 2, Description = "Description task 2", Name = "Task 2" },
                        new { Id = 3, Description = "Description task 3", Name = "Task 3" }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.DailyTaskTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyTaskId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("DailyTaskId");

                    b.HasIndex("TagId");

                    b.ToTable("DailyTaskTags");

                    b.HasData(
                        new { Id = 1, DailyTaskId = 1, TagId = 1 },
                        new { Id = 2, DailyTaskId = 2, TagId = 1 },
                        new { Id = 3, DailyTaskId = 2, TagId = 2 },
                        new { Id = 4, DailyTaskId = 3, TagId = 1 },
                        new { Id = 5, DailyTaskId = 3, TagId = 3 },
                        new { Id = 6, DailyTaskId = 3, TagId = 4 }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "user" },
                        new { Id = 2, Name = "admin" }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new { Id = 1, Name = "good day" },
                        new { Id = 2, Name = "very good" },
                        new { Id = 3, Name = "food" },
                        new { Id = 4, Name = "people" }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Login = "tom@gmail.com", Password = "123" },
                        new { Id = 2, Login = "alice@gmail.com", Password = "456" },
                        new { Id = 3, Login = "sam@gmail.com", Password = "789" }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new { Id = 1, Age = 19, Name = "tom", PhoneNumber = "+3809513123", UserId = 1 },
                        new { Id = 2, Age = 19, Name = "alice", PhoneNumber = "+3809413124", UserId = 2 },
                        new { Id = 3, Age = 20, Name = "sam", PhoneNumber = "+3809713121", UserId = 3 }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = 1, RoleId = 1, UserId = 1 },
                        new { Id = 2, RoleId = 2, UserId = 1 },
                        new { Id = 3, RoleId = 1, UserId = 2 },
                        new { Id = 4, RoleId = 1, UserId = 3 }
                    );
                });

            modelBuilder.Entity("WebApplication1.Models.Comment", b =>
                {
                    b.HasOne("WebApplication1.Models.DailyTask", "DailyTask")
                        .WithMany("Comments")
                        .HasForeignKey("DailyTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.DailyTaskTag", b =>
                {
                    b.HasOne("WebApplication1.Models.DailyTask", "DailyTask")
                        .WithMany("DailyTaskTags")
                        .HasForeignKey("DailyTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Tag", "Tag")
                        .WithMany("DailyTaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.UserProfile", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("WebApplication1.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.UserRole", b =>
                {
                    b.HasOne("WebApplication1.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
